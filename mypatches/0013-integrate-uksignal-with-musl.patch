diff --color -Nurp musl-1.1.19/arch/x86_64/bits/signal.h musl-1.1.19.new/arch/x86_64/bits/signal.h
--- musl-1.1.19/arch/x86_64/bits/signal.h	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/arch/x86_64/bits/signal.h	2020-12-16 02:01:37.758440263 +0100
@@ -1,3 +1,7 @@
+#ifdef CONFIG_LIBUKSIGNAL
+#include <uk/signal.h>
+#endif
+
 #if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
  || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
 
@@ -97,12 +101,14 @@ struct sigaltstack {
 typedef struct __ucontext {
 	unsigned long uc_flags;
 	struct __ucontext *uc_link;
-	stack_t uc_stack;
+	struct sigaltstack uc_stack;
 	mcontext_t uc_mcontext;
 	sigset_t uc_sigmask;
 	unsigned long __fpregs_mem[64];
 } ucontext_t;
 
+#ifndef CONFIG_LIBUKSIGNAL
+
 #define SA_NOCLDSTOP  1
 #define SA_NOCLDWAIT  2
 #define SA_SIGINFO    4
@@ -112,8 +118,6 @@ typedef struct __ucontext {
 #define SA_RESETHAND  0x80000000
 #define SA_RESTORER   0x04000000
 
-#endif
-
 #define SIGHUP    1
 #define SIGINT    2
 #define SIGQUIT   3
@@ -151,3 +155,6 @@ typedef struct __ucontext {
 
 #define _NSIG 65
 
+#endif
+#endif // LIBUKSIGNAL
+
diff --color -Nurp musl-1.1.19/include/alltypes.h.in musl-1.1.19.new/include/alltypes.h.in
--- musl-1.1.19/include/alltypes.h.in	2020-12-09 22:19:27.429161000 +0100
+++ musl-1.1.19.new/include/alltypes.h.in	2020-12-12 18:28:32.780944308 +0100
@@ -63,7 +63,7 @@ TYPEDEF struct __mbstate_t { unsigned __
 
 TYPEDEF struct __locale_struct * locale_t;
 
-TYPEDEF struct __sigset_t { unsigned long __bits[128/sizeof(long)]; } sigset_t;
+TYPEDEF unsigned long sigset_t;
 
 STRUCT iovec { void *iov_base; size_t iov_len; };
 
diff --color -Nurp musl-1.1.19/include/signal.h musl-1.1.19.new/include/signal.h
--- musl-1.1.19/include/signal.h	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/include/signal.h	2020-12-14 01:36:18.563363334 +0100
@@ -1,6 +1,10 @@
 #ifndef _SIGNAL_H
 #define _SIGNAL_H
 
+#ifdef CONFIG_LIBUKSIGNAL
+#include <uk/signal.h>
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -41,8 +45,6 @@ extern "C" {
 #define SI_USER 0
 #define SI_KERNEL 128
 
-typedef struct sigaltstack stack_t;
-
 #endif
 
 #include <bits/signal.h>
@@ -89,6 +91,11 @@ typedef struct sigaltstack stack_t;
 #define CLD_STOPPED 5
 #define CLD_CONTINUED 6
 
+
+typedef struct sigaltstack stack_t;
+
+#ifndef CONFIG_LIBUKSIGNAL
+
 union sigval {
 	int sival_int;
 	void *sival_ptr;
@@ -185,10 +192,6 @@ struct sigevent {
 	char __pad[56-3*sizeof(long)];
 };
 
-#define SIGEV_SIGNAL 0
-#define SIGEV_NONE 1
-#define SIGEV_THREAD 2
-
 int __libc_current_sigrtmin(void);
 int __libc_current_sigrtmax(void);
 
@@ -215,9 +218,14 @@ int sigqueue(pid_t, int, const union sig
 int pthread_sigmask(int, const sigset_t *__restrict, sigset_t *__restrict);
 int pthread_kill(pthread_t, int);
 
+#endif // CONFIG_LIBUKSIGNAL
+
 void psiginfo(const siginfo_t *, const char *);
 void psignal(int, const char *);
 
+#define SIGEV_SIGNAL 0
+#define SIGEV_NONE 1
+#define SIGEV_THREAD 2
 #endif
 
 #if defined(_XOPEN_SOURCE) || defined(_BSD_SOURCE) || defined(_GNU_SOURCE)
@@ -243,7 +251,7 @@ void (*sigset(int, void (*)(int)))(int);
 #define SS_FLAG_BITS SS_AUTODISARM
 #endif
 
-#if defined(_BSD_SOURCE) || defined(_GNU_SOURCE)
+#if (defined(_BSD_SOURCE) || defined(_GNU_SOURCE)) && defined(CONFIG_LIBUKSIGNAL)
 #define NSIG _NSIG
 typedef void (*sig_t)(int);
 #endif
diff --color -Nurp musl-1.1.19/include/sys/signal.h musl-1.1.19.new/include/sys/signal.h
--- musl-1.1.19/include/sys/signal.h	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/include/sys/signal.h	2020-12-13 18:59:46.733474746 +0100
@@ -1,2 +1,6 @@
 #warning redirecting incorrect #include <sys/signal.h> to <signal.h>
+#ifdef CONFIG_LIBUKSIGNAL
+#include <uk/signal.h>
+#else
 #include <signal.h>
+#endif
diff --color -Nurp musl-1.1.19/include/sys/wait.h musl-1.1.19.new/include/sys/wait.h
--- musl-1.1.19/include/sys/wait.h	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/include/sys/wait.h	2020-12-13 18:50:19.075753188 +0100
@@ -22,7 +22,11 @@ pid_t waitpid (pid_t, int *, int );
 #if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
  || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) \
  || defined(_BSD_SOURCE)
+#ifdef CONFIG_LIBUKSIGNAL
+#include <uk/signal.h>
+#else
 #include <signal.h>
+#endif
 int waitid (idtype_t, id_t, siginfo_t *, int);
 #endif
 
diff --color -Nurp musl-1.1.19/src/mq/mq_notify.c musl-1.1.19.new/src/mq/mq_notify.c
--- musl-1.1.19/src/mq/mq_notify.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/mq/mq_notify.c	2020-12-13 21:45:52.789047440 +0100
@@ -45,8 +45,11 @@ int mq_notify(mqd_t mqd, const struct si
 	if (s < 0) return -1;
 	args.sock = s;
 
+#if !(CONFIG_LIBUKSIGNAL) // FIXME
 	if (sev->sigev_notify_attributes) attr = *sev->sigev_notify_attributes;
 	else pthread_attr_init(&attr);
+#endif
+	
 	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
 	pthread_barrier_init(&args.barrier, 0, 2);
 
diff --color -Nurp musl-1.1.19/src/process/posix_spawn.c musl-1.1.19.new/src/process/posix_spawn.c
--- musl-1.1.19/src/process/posix_spawn.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/process/posix_spawn.c	2020-12-14 01:58:09.315621441 +0100
@@ -49,7 +49,9 @@ static int child(void *args_vp)
 	 * memory, with unpredictable and dangerous results. To
 	 * reduce overhead, sigaction has tracked for us which signals
 	 * potentially have a signal handler. */
+#ifndef CONFIG_LIBUKSIGNAL
 	__get_handler_set(&hset);
+#endif
 	for (i=1; i<_NSIG; i++) {
 		if ((attr->__flags & POSIX_SPAWN_SETSIGDEF)
 		     && sigismember(&attr->__def, i)) {
@@ -58,14 +60,18 @@ static int child(void *args_vp)
 			if (i-32<3U) {
 				sa.sa_handler = SIG_IGN;
 			} else {
+#ifndef CONFIG_LIBUKSIGNAL
 				__libc_sigaction(i, 0, &sa);
+#endif
 				if (sa.sa_handler==SIG_IGN) continue;
 				sa.sa_handler = SIG_DFL;
 			}
 		} else {
 			continue;
 		}
+#ifndef CONFIG_LIBUKSIGNAL
 		__libc_sigaction(i, &sa, 0);
+#endif
 	}
 
 	if (attr->__flags & POSIX_SPAWN_SETSID)
diff --color -Nurp musl-1.1.19/src/signal/sigaction.c musl-1.1.19.new/src/signal/sigaction.c
--- musl-1.1.19/src/signal/sigaction.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/signal/sigaction.c	2020-12-12 20:13:44.864197679 +0100
@@ -6,6 +6,7 @@
 #include "libc.h"
 #include "ksigaction.h"
 
+#ifndef CONFIG_LIBUKSIGNAL
 static int unmask_done;
 static unsigned long handler_set[_NSIG/(8*sizeof(long))];
 
@@ -61,3 +62,4 @@ int __sigaction(int sig, const struct si
 }
 
 weak_alias(__sigaction, sigaction);
+#endif
diff --color -Nurp musl-1.1.19/src/signal/sigaltstack.c musl-1.1.19.new/src/signal/sigaltstack.c
--- musl-1.1.19/src/signal/sigaltstack.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/signal/sigaltstack.c	2020-12-13 18:57:23.849232052 +0100
@@ -1,4 +1,8 @@
+#ifdef CONFIG_LIBUKSIGNAL
+#include <uk/signal.h>
+#else
 #include <signal.h>
+#endif
 #include <errno.h>
 #include "syscall.h"
 
diff --color -Nurp musl-1.1.19/src/thread/pthread_cancel.c musl-1.1.19.new/src/thread/pthread_cancel.c
--- musl-1.1.19/src/thread/pthread_cancel.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/thread/pthread_cancel.c	2020-12-14 02:01:26.350254246 +0100
@@ -41,8 +41,12 @@ long __syscall_cp_c(syscall_arg_t nr,
 
 static void _sigaddset(sigset_t *set, int sig)
 {
+#if CONFIG_LIBUKSIGNAL
+	sigaddset(set, sig);
+#else
 	unsigned s = sig-1;
 	set->__bits[s/8/sizeof *set->__bits] |= 1UL<<(s&8*sizeof *set->__bits-1);
+#endif
 }
 
 __attribute__((__visibility__("hidden")))
@@ -81,7 +85,9 @@ static void init_cancellation()
 		.sa_sigaction = cancel_handler
 	};
 	memset(&sa.sa_mask, -1, _NSIG/8);
+#ifndef CONFIG_LIBUKSIGNAL
 	__libc_sigaction(SIGCANCEL, &sa, 0);
+#endif
 }
 
 int pthread_cancel(pthread_t t)
diff --color -Nurp musl-1.1.19/src/thread/synccall.c musl-1.1.19.new/src/thread/synccall.c
--- musl-1.1.19/src/thread/synccall.c	2018-02-22 19:39:19.000000000 +0100
+++ musl-1.1.19.new/src/thread/synccall.c	2020-12-14 02:04:58.015738709 +0100
@@ -82,7 +82,9 @@ void __synccall(void (*func)(void *), vo
 	 * interrupts the SIGSYNCCALL handlers. The main possible source
 	 * of trouble is asynchronous cancellation. */
 	memset(&sa.sa_mask, -1, sizeof sa.sa_mask);
+#ifndef CONFIG_LIBUKSIGNAL
 	__libc_sigaction(SIGSYNCCALL, &sa, 0);
+#endif
 
 	pid = __syscall(SYS_getpid);
 	self = __syscall(SYS_gettid);
@@ -156,7 +158,9 @@ void __synccall(void (*func)(void *), vo
 	}
 
 	sa.sa_handler = SIG_IGN;
+#ifndef CONFIG_LIBUKSIGNAL
 	__libc_sigaction(SIGSYNCCALL, &sa, 0);
+#endif
 
 single_threaded:
 	func(ctx);
